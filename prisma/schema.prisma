generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id          String  @id @unique
  fullname    String
  firstname   String?
  lastname    String?
  email       String  @unique
  role        String  @default("regular")
  account     Float   @default(0)
  earnings    Float   @default(0)
  points      Float   @default(0)
  win         Float   @default(0)
  topTen      Float   @default(0)
  madeCut     Float   @default(0)
  appearances Int     @default(0)

  friends String[]

  tourCards     TourCard[]

  @@map("members")
}

model Season {
  id          String       @id @default(cuid())
  year        Int          @unique
  number      Int          @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tourCards   TourCard[]
  tournaments Tournament[]
  tours       Tour[]
  tiers       Tier[]

  @@map("seasons")
}

model Tour {
  id           String @id @default(cuid())
  name         String
  logoUrl      String
  seasonId     String
  shortForm    String
  buyIn        Int
  playoffSpots Int[]  @default([35])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournaments Tournament[]
  tourCards   TourCard[]
  tiers       Tier[]
  season      Season       @relation(fields: [seasonId], references: [id])

  @@unique([name, seasonId])
  @@map("tours")
}

model Tier {
  id          String       @id @default(cuid())
  payouts     Float[]
  points      Float[]
  name        String
  seasonId    String
  tours       Tour[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tournaments Tournament[]

  season Season @relation(fields: [seasonId], references: [id])

  @@unique([name, seasonId])
  @@map("tiers")
}

model Tournament {
  id           String   @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  tierId       String
  courseId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  logoUrl      String?
  seasonId     String
  apiId        String?
  currentRound Int?
  livePlay     Boolean?
  tours        Tour[]
  golfers      Golfer[]
  teams        Team[]
  course       Course   @relation(fields: [courseId], references: [id])
  season       Season   @relation(fields: [seasonId], references: [id])
  tier         Tier     @relation(fields: [tierId], references: [id])

  @@unique([name, startDate, tierId])
  @@map("tournaments")
}

model Course {
  id             String       @id @default(cuid())
  apiId          String
  name           String       @unique
  location       String
  par            Int
  front          Int
  back           Int
  timeZoneOffset Int          @default(4)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  tournaments    Tournament[]

  @@map("courses")
}

model Team {
  id                Int        @id @default(autoincrement())
  golferIds         Int[]
  tournamentId      String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now()) @updatedAt
  earnings          Float?
  makeCut           Float?
  points            Float?
  tourCardId        String
  today             Float?
  thru              Float?
  round             Int?
  roundOneTeeTime   String?
  roundOne          Float?
  roundTwoTeeTime   String?
  roundTwo          Float?
  roundThreeTeeTime String?
  roundThree        Float?
  roundFourTeeTime  String?
  roundFour         Float?
  position          String?
  pastPosition      String?
  score             Float?
  topTen            Float?
  topFive           Float?
  topThree          Float?
  win               Float?
  tourCard          TourCard   @relation(fields: [tourCardId], references: [id])
  tournament        Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, tourCardId])
  @@map("teams")
}

model TourCard {
  id          String @id @default(cuid())
  displayName String
  earnings    Float  @default(0)
  points      Float  @default(0)
  win         Float  @default(0)
  topTen      Float  @default(0)
  madeCut     Float  @default(0)
  appearances Int    @default(0)
  playoff     Int    @default(0)

  position String?
  memberId String
  tourId   String
  seasonId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  teams  Team[]
  member Member @relation(fields: [memberId], references: [id])
  season Season @relation(fields: [seasonId], references: [id])
  tour   Tour   @relation(fields: [tourId], references: [id])

  @@unique([memberId, seasonId])
  @@map("tour_cards")
}

model Golfer {
  id                Int        @id @default(autoincrement())
  apiId             Int
  country           String?
  position          String?
  posChange         Int?
  playerName        String
  score             Int?
  makeCut           Float?
  topTen            Float?
  win               Float?
  today             Int?
  thru              Int?
  round             Int?
  roundOneTeeTime   String?
  roundOne          Int?
  roundTwoTeeTime   String?
  roundTwo          Int?
  roundThreeTeeTime String?
  roundThree        Int?
  roundFourTeeTime  String?
  roundFour         Int?
  endHole           Int?
  group             Int?
  worldRank         Int?
  rating            Float?
  usage             Float?
  earnings          Float?
  tournamentId      String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  tournament        Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([apiId, tournamentId])
  @@map("golfers")
}

model Transactions {
  id              Int             @id @default(autoincrement())
  userId          String
  seasonId        String
  description     String
  amount          Float
  transactionType TransactionType

  @@map("transactions")
}


enum TransactionType {
  TourCardFee
  TournamentWinnings
  Withdrawal
  LeagueDonation
  CharityDonation
  Payment
}
