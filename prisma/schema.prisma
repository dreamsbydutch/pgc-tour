generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id        String   @id @unique
  fullname  String
  firstname String?
  lastname  String?
  email     String   @unique
  role      String   @default("regular")
  account   Float    @default(0)
  friends   String[]

  tourCards TourCard[]

  @@map("members")
}

model Season {
  id          String       @id @default(cuid())
  year        Int          @unique
  number      Int          @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tourCards   TourCard[]
  tournaments Tournament[]
  tours       Tour[]
  tiers       Tier[]

  @@map("seasons")
}

model Tour {
  id        String @id @default(cuid())
  name      String
  logoUrl   String
  seasonId  String
  shortForm String
  buyIn     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tournaments Tournament[]
  tourCards   TourCard[]
  tiers       Tier[]
  season      Season       @relation(fields: [seasonId], references: [id])

  @@unique([name, seasonId])
  @@map("tours")
}

model Tier {
  id          String       @id @default(cuid())
  payouts     Float[]
  points      Float[]
  name        String
  seasonId    String
  tours       Tour[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tournaments Tournament[]

  season Season @relation(fields: [seasonId], references: [id])

  @@unique([name, seasonId])
  @@map("tiers")
}

model Tournament {
  id           String   @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  tierId       String
  courseId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  logoUrl      String?
  seasonId     String
  apiId        String?
  currentRound Int?
  livePlay     Boolean?
  tours        Tour[]
  golfers      Golfer[]
  teams        Team[]
  course       Course   @relation(fields: [courseId], references: [id])
  season       Season   @relation(fields: [seasonId], references: [id])
  tier         Tier     @relation(fields: [tierId], references: [id])

  @@unique([name, startDate, tierId])
  @@map("tournaments")
}

model Course {
  id          String       @id @default(cuid())
  apiId       String
  name        String       @unique
  location    String
  par         Int
  front       Int
  back        Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tournaments Tournament[]

  @@map("courses")
}

model Team {
  id           Int         @id @default(autoincrement())
  golferIds    Int[]
  tournamentId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  earnings     Float?
  makeCut      Float?
  points       Float?
  tourCardId   String
  position     String?
  score        Float?
  strokes      Float?
  teamRounds   TeamRound[]
  tourCard     TourCard    @relation(fields: [tourCardId], references: [id])
  tournament   Tournament  @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, tourCardId])
  @@map("teams")
}

model TeamRound {
  id        Int       @id @default(autoincrement())
  position  String?
  score     Float?
  strokes   Float?
  thru      Float?
  round     Int?
  teeTime   DateTime?
  front     Float?
  back      Float?
  teamId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  team      Team      @relation(fields: [teamId], references: [id])

  @@map("team_rounds")
}

model TourCard {
  id          String  @id @default(cuid())
  displayName String
  earnings    Float   @default(0)
  points      Float?
  position    String?
  memberId    String
  tourId      String
  seasonId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  teams  Team[]
  member Member @relation(fields: [memberId], references: [id])
  season Season @relation(fields: [seasonId], references: [id])
  tour   Tour   @relation(fields: [tourId], references: [id])

  @@unique([memberId, seasonId])
  @@map("tour_cards")
}

model Golfer {
  id                Int        @id @default(autoincrement())
  apiId             Int
  country           String?
  position          String?
  playerName        String
  score             Int?
  makeCut           Float?
  topTen            Float?
  win               Float?
  today             Int?
  thru              Int?
  round             Int?
  roundOneTeeTime   String?
  roundOne          Int?
  roundTwoTeeTime   String?
  roundTwo          Int?
  roundThreeTeeTime String?
  roundThree        Int?
  roundFourTeeTime  String?
  roundFour         Int?
  group             Int?
  worldRank         Int?
  rating            Float?
  usage             Float?
  earnings          Float?
  tournamentId      String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  tournament        Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([apiId, tournamentId])
  @@map("golfers")
}

model Transactions {
  id              Int             @id @default(autoincrement())
  userId          String
  seasonId        String
  description     String
  amount          Float
  transactionType TransactionType

  @@map("transactions")
}

enum TransactionType {
  TourCardFee
  TournamentWinnings
  Withdrawal
  LeagueDonation
  CharityDonation
  Payment
}
